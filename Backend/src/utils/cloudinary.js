import { v2 as cloudinary } from 'cloudinary';
import fs from 'fs';

cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET,
});

/**
 * Util for uploading files on cloudinary using their local paths and deleting them afterwards
 * @param {String} localFilePath - The local path where the files are temporarely stored by multer
 * @returns {Object} The upload response recieved from cloudinary
 */

const uploadOnCloudinary = async (localFilePath) => {
    try {
        if (!localFilePath) throw new Error('CLOUDIANRY_FILE_PATH_MISSING');

        const res = await cloudinary.uploader.upload(localFilePath, {
            resource_type: 'auto',
        });

        console.log('file uploaded successfully, URL: ', res.url);

        return res; // or directly res.url
    } catch (err) {
        throw new Error(
            `error while uploading file on cloudinary, ${err.message}`
        );
    } finally {
        fs.unlinkSync(localFilePath);
    }
};

/**
 * Util for deleting files from cloudinary using their URLs (public ids)
 * @param {String} URL - The URL generated by Cloudinary
 * @returns {Object} The delete response recieved from cloudinary
 */

const deleteFromCloudinary = async (URL) => {
    try {
        if (!URL) {
            throw new Error('MISSING_URL');
        }

        //delete old file in cloudinary using its public_id
        //structure of url==> http://-----/----/resource_type/------/-----/<public-id>.extension
        const public_id = URL.split('/').pop().split('.')[0];
        const resource_type = URL.split('/')[4];
        const res = await cloudinary.uploader.destroy(public_id, {
            resource_type,
            invalidate: true,
        });

        console.log('file deleted successfully', res); // {result:"ok"}
        return res;
    } catch (err) {
        throw new Error(
            `error while deleting file from cloudinary, ${err.message}`
        );
    }
};

export { uploadOnCloudinary, deleteFromCloudinary };
